# 企业版本控制的改革：走向Git #

在传统企业中，版本控制系统大都采用ClearCase或SVN。特别是ClearCase在早期提供了强大的企业应用的功能，我们部门也很早使用了。而且长久以来，在它周围建立了无数的应用和流程，同事们都觉得它是必须的了。

然而随着敏捷和开放的推动下，在有些产品用ClearCase开发碰到了很多局限，比如在家上班，远程团队开发。有人开始想到是否可以引入其他工具来解决，不过在大型企业中要改变这种基础的工具是很难的。

我就想介绍一下我们是如何一步步地走向Git的。

特别声明：本文原为图灵社区活动“[唤醒你心中的布道师](http://www.ituring.com.cn/activity/details/696)”而写的文章：[企业版本控制的改革：从ClearCase到Git--我的布道之旅](http://www.ituring.com.cn/article/details/721)，这里有所编辑。

这里想说的主要是如何在需要的时候推动技术的变革，而不是探讨技术的好坏。每个技术都有适应的场所，请勿生搬硬套。

关于版本控制的选择，也可以看看Martin Fowler写的[版本控制工具(english)](http://martinfowler.com/bliki/VersionControlTools.html)

## 了解最新技术-分布式版本控制（DVCS）##

在推动技术改变的时候，首先要了解最新的技术状况，别学了一个旧了过时了的。

我们使用的主要是ClearCase，开始考虑这个转换的时候是在2009年初，SVN是第一个考虑的对象，因为它在开源中用的最多，[sourceforge](http://sourceforge.net)和Eclipse的很多项目多用它，但我总觉得缺了点什么。

恰好我有个同事提到SVN和ClearCase都是集中式的，推荐我看看一个分布式版本控制工具：Mercurial，说实话听了介绍不是很懂，没有眼前一亮的感觉。聊了一下，感觉和SVN的分支没有多大区别，何况DVCS还需要两层提交呢。

同时我也了解到还有其它的分布式版本控制工具Git，Bazaar可供选择。

不管怎么样，我了解到这块领域有了最新的技术，它或许能解决我们的问题（要不时地问问自己为什么）。

## 尝试在日常中使用分布式版本控制 ##

为了尽快了解DVCS，我决定要在日常的开发中用用它，实践它，尽快地掌握它的关键。

由于同事对Mercurial很熟，我就踏踏实实地用Mercurial尝试了两个星期，不懂就问他，顺便查查资料去比较一番。

DVCS真是很神奇，很好用，特别对我的胃口，感觉DVCS天生是为软件开发用的。

在同一时刻，我又比较深入的看了看其他的系统如Git，发现Git的生态圈更好一点。在软件开发中，生态圈会决定将来这个工具的发展趋势。

 * 如Eclipse插件开发邮件中开始讨论并决定用Git替代svn。
 * Git有很多的书可供选择（如 [ProGit](http://progit.org/)），[git在线网站](http://git-scm.com/)的内容也极其丰富。
 * [github](https://github.com/)也漂亮得提供git的支持。补充一下，那时候[bitbucket](http://bitbucket.org/)和github还在同一个水平线上。[google code](http://code.google.com/)也还不支持git，只有Mercurial和svn。 
 
通过这些实践和了解，发现DVCS-Git很适合我们所在的部门的企业产品软件开发。

## 宣扬和推广分布式版本控制 ##

要在企业中换一个版本控制工具难度非常大，所以必须要布道，我采用了下面的方法：

   1. 每月我们都有固定学习新东西的时间，我就推荐了Mercurial、Git两个课程，让大家共同来学习，了解它。顺便我要看看开发者对它的接受程度，有趣的是，水平越牛的人越是喜欢它，纷纷过来问什么时候能在产品开发中用上Git。
   2. 除了开发者，管理者和其他的使用者（配置管理的同事）的想法也很重要。我经常抓住机会和这些人聊DVCS ，聊Git，给他们介绍，看看他们有什么想法。当然他们有时候会不同意我的观点（有强势的，有委婉的），我就试图去说服他们，并从中挖掘出推动这个变化的关键因素。
   
慢慢得我就得到了很多如何推动这个变化的关键说服点，这个每次情况都不会一样。

## 详细研究版本迁移 ##

开发者想使用分布式版本控制的呼声越来越高，管理者也开始认真考虑了。

在企业中，改变所需要的研究评测报告是必不可少的了，这也给了我一次重新认识集中式和分布式版本控制的过程，我花了更多的时间去想这个改变对企业带来的好处。实际上开发者有时候不会考虑到整个软件开发的所有方面，如安全，持续集成等等。报告的大致框架是：

 * 现在问题是什么？
 * 什么是DVCS，Git是什么？
 * 能改变什么？带来的好处？
 * 如果变化，计划是什么？

这一期间，使我静下心来更详细地了解了Git对企业可能的影响（有好的，有坏的），并制定了相应的对策。

## 开始在小范围实施 ##

技术改变需要耐心和机遇，机缘巧合，迁移到Git的建议比较顺利地被管理层接受了。

然后就是要去认认真真地实施了，这不是一个小问题，既然是软件开发，来不得半点的马虎，细节决定一切。而且实施得好坏还涉及到产品开发的正常运转。

企业中一般会选择从小范围开始实施，成功了才推广，下面是我们的一些实践。

 * 我们开始用[gitolite](https://github.com/sitaramc/gitolite)作为Git服务器，架好试验平台，在一个小项目中开始尝试。
 * 人手一本Git的书，安排Git入门培训，提高驾驭Git的能力。
 * 不断收集资料，提高对Git的认识。
 
还好基本上没有出大的差错，虽然有蛮多技术难点的，不过最后都解决了。通过小范围的使用推广，我们的技术储备也加强了（特别是配置管理的人），对下一步的全面实施更有信心。

## 推广、并引入Gerrit做代码审查 ##

早期我们用的是gitolite来架Git服务器，它很不错。不过后来发现[Gerrit](http://code.google.com/p/gerrit/)更好用，后来就切换过去使用了。这一点很重要，要不断探索这些新技术，争取在大规模推广前，用一个最适合的工具，否则一用上，在企业中就很难改变了。

Git开始在更多团队和更多产品中使用后，我们不断加强知识的培训，而且把相关的系统（如持续集成）都迁移到Git上去。一切都还不错，只是Git比想象中还复杂一点。

因为Gerrit有很强大的代码审查（code review）功能，不久以后这个功能也用上去了，代码提交的质量一下子上了一个档次，这是开始推动Git变革时没有想到的。

## 小结 ##
技术的变化不是那么容易得，需要天时、地利、人和，缺一不可。如果你有什么好建议，欢迎一起探讨。